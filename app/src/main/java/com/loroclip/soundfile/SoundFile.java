/*
 * Copyright (C) 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.loroclip.soundfile;

import android.media.MediaExtractor;
import android.media.MediaFormat;

import com.loroclip.model.FrameGains;
import com.loroclip.model.Record;
import com.loroclip.util.Util;

import org.json.JSONArray;

import java.io.File;
import java.util.Arrays;
import java.util.List;

public class SoundFile {
    private ProgressListener mProgressListener = null;
    private File mInputFile = null;

    // Member variables representing frame data
    private Record mRecord;
    private String mFileType;
    private int mFileSize;
    private int mSampleRate;
    private int mChannels;
    private int mNumFrames;
    private int[] mFrameGains;


    // Progress listener interface.
    public interface ProgressListener {
        boolean reportProgress(double fractionComplete);
    }

    // Custom exception for invalid inputs.
    public class InvalidInputException extends Exception {
        // Serial version ID generated by Eclipse.
        private static final long serialVersionUID = -2505698991597837165L;
        public InvalidInputException(String message) {
            super(message);
        }
    }

    // TODO(nfaralli): what is the real list of supported extensions? Is it device dependent?
    public static String[] getSupportedExtensions() {
        return new String[] {"mp3", "wav", "3gpp", "3gp", "amr", "aac", "m4a", "ogg"};
    }

    // Create and return a SoundFile object using the file fileName.
    public static SoundFile create(Record record, ProgressListener progressListener)
        throws java.io.FileNotFoundException,
        java.io.IOException, InvalidInputException {
        // First check that the file exists and that its extension is supported.
        File f = record.getLocalFile();
        if (!f.exists()) {
            throw new java.io.FileNotFoundException(f.getAbsolutePath());
        }
        String name = f.getName().toLowerCase();
        String[] components = name.split("\\.");
        if (components.length < 2) {
            return null;
        }
        if (!Arrays.asList(getSupportedExtensions()).contains(components[components.length - 1])) {
            return null;
        }
        SoundFile soundFile = new SoundFile(record);
        soundFile.setProgressListener(progressListener);
        soundFile.ReadFile(f);
        return soundFile;
    }

    public String getFiletype() {
        return mFileType;
    }


    public int getSampleRate() {
        return mSampleRate;
    }

    public int getChannels() {
        return mChannels;
    }


    // Should be removed when the app will use directly the samples instead of the frames.
    public int getNumFrames() {
        return mNumFrames;
    }

    // Should be removed when the app will use directly the samples instead of the frames.
    public int getSamplesPerFrame() {
        return 1024;  // just a fixed value here...
    }

    // Should be removed when the app will use directly the samples instead of the frames.
    public int[] getFrameGains() {
        return mFrameGains;
    }


    // A SoundFile object should only be created using the static methods create() and record().
    private SoundFile(Record record) {
        this.mRecord = record;
    }

    private void setProgressListener(ProgressListener progressListener) {
        mProgressListener = progressListener;
    }

    private void ReadFile(File inputFile)
        throws java.io.FileNotFoundException,
        java.io.IOException, InvalidInputException {
        MediaExtractor extractor = new MediaExtractor();
        MediaFormat format = null;
        int i;

        mInputFile = inputFile;
        String[] components = mInputFile.getPath().split("\\.");
        mFileType = components[components.length - 1];
        mFileSize = (int)mInputFile.length();
        extractor.setDataSource(mInputFile.getPath());
        int numTracks = extractor.getTrackCount();
        // find and select the first audio track present in the file.
        for (i=0; i<numTracks; i++) {
            format = extractor.getTrackFormat(i);
            if (format.getString(MediaFormat.KEY_MIME).startsWith("audio/")) {
                extractor.selectTrack(i);
                break;
            }
        }
        if (i == numTracks) {
            throw new InvalidInputException("No audio track found in " + mInputFile);
        }
        mChannels = format.getInteger(MediaFormat.KEY_CHANNEL_COUNT);
        mSampleRate = format.getInteger(MediaFormat.KEY_SAMPLE_RATE);

        try {
            List<FrameGains> frameGainsArray = mRecord.getFrameGains();
            if (frameGainsArray.isEmpty()) {
                return;
            }

            JSONArray frameGainsJSON = new JSONArray(frameGainsArray.get(0).getFrames());
            mFrameGains = Util.JSONArrayToIntArray(frameGainsJSON);
            mNumFrames = mFrameGains.length;
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
